@page "/batch-edit-players"
@using System.ComponentModel.DataAnnotations
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject HttpClient httpclient

<TelerikGrid OnRead="@OnGridRead"
             TItem="@Player"
             EditMode="@GridEditMode.Incell"
             FilterMode="@GridFilterMode.FilterRow"
             Sortable="true"
             Pageable="true"
             PageSize="3"
             OnCreate="@OnGridCreate"
             OnDelete="@OnGridDelete"
             OnUpdate="@OnGridUpdate">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Item</GridCommandButton>
        <GridCommandButton Command="Save" Icon="@SvgIcon.Save" OnClick="SaveCommandHandler">Save Changes</GridCommandButton>
        <GridCommandButton Command="Save" Icon="@SvgIcon.Cancel" OnClick="DiscardChanges">Discard Changes</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(Player.username)" Title="Username" />
        <GridColumn Field="@nameof(Player.email)" Title="Email" />
        <GridColumn Field="@nameof(Player.rank)" Title="Rank" />
        <GridColumn Field="@nameof(Player.kills)" Title="Total Kills" />
        <GridColumn Field="@nameof(Player.KD)" Title="K/D ratio" />
        <GridColumn Field="@nameof(Player.headshots)" Title="Headshots" />
        <GridColumn Field="@nameof(Player.accuracy)" Title="Accuracy" />
        <GridCommandColumn Width="150px">
            <GridCommandButton Command="Delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private List<Player> players = new();
    private bool followingCreate { get; set; } = false;
    private bool saveChanges { get; set; } = false;



    private async Task OnGridCreate(GridCommandEventArgs args)
    {
        var createdItem = (Player)args.Item;

        var response = await httpclient.PostAsJsonAsync<Player>($"https://localhost:7065/add-player", createdItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        followingCreate = true;

    }

    private async Task OnGridDelete(GridCommandEventArgs args)
    {
        var deletedItem = (Player)args.Item;

        var response = await httpclient.DeleteAsync($"https://localhost:7065/delete-player/{deletedItem.Id}");

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

    }

    private async Task OnGridRead(GridReadEventArgs args)
    {
        var response = await httpclient.PostAsJsonAsync($"https://localhost:7065/get-all-players", args.Request);

        if (!response.IsSuccessStatusCode)
            throw new Exception($"Response did not return data, Response : {response.StatusCode}");

        GridPlayerData? result = await response.Content.ReadFromJsonAsync<GridPlayerData>();

        args.Data = result.CurrentPageData;
        args.Total = result.TotalItemCount;
    }

    private async Task OnGridUpdate(GridCommandEventArgs args)
    {
        if (followingCreate)
        {
            followingCreate = false;
            args.IsCancelled = true;
            return;
        }



        if (!saveChanges)
        {
            var p = (Player)args.Item;

            var player = players.Find(x=> x.Id == p.Id);

            if (player == null)
            {
                players.Add(p);
            }
            else
            {
                player.username = p.username;
                player.email = p.email;
                player.rank = p.rank;
                player.kills = p.kills;
                player.KD = p.KD;
                player.headshots = p.headshots;
                player.accuracy = p.accuracy;
            }

            args.IsCancelled = true;
            return;
        }

        if(players.Count > 0)
        {
            var response = await httpclient.PutAsJsonAsync<List<Player>>($"https://localhost:7065/batch-edit-players", players);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
            }
            saveChanges = false;
            players.Clear();
        }
        
        saveChanges = false;
    }

    private void SaveCommandHandler()
    {
        saveChanges = true;
    }

    private void DiscardChanges()
    {
        players.Clear();
        saveChanges = true;
    }

}
