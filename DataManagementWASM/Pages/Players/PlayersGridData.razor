@page "/grid-data"
@using System.ComponentModel.DataAnnotations
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject HttpClient httpclient

<TelerikGrid Data="players"
             EditMode="@GridEditMode.Incell"
             FilterMode="@GridFilterMode.FilterRow"
             Sortable="true"
             Pageable="true"
             PageSize="3"
             OnCreate="@OnGridCreate"
             OnDelete="@OnGridDelete"
             OnUpdate="@OnGridUpdate">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Item</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(Player.username)" Title="Username" />
        <GridColumn Field="@nameof(Player.email)" Title="Email" />
        <GridColumn Field="@nameof(Player.rank)" Title="Rank" />
        <GridColumn Field="@nameof(Player.kills)" Title="Total Kills" />
        <GridColumn Field="@nameof(Player.KD)" Title="K/D ratio" />
        <GridColumn Field="@nameof(Player.headshots)" Title="Headshots" />
        <GridColumn Field="@nameof(Player.accuracy)" Title="Accuracy" />
        <GridCommandColumn Width="150px">
            <GridCommandButton Command="Delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {

    private List<Player>? players = new();
    private bool followingCreate { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        players = await httpclient.GetFromJsonAsync<List<Player>>($"https://localhost:7065/get-players");
    }

    private async Task OnGridCreate(GridCommandEventArgs args)
    {
        var createdItem = (Player)args.Item;

        var response = await httpclient.PostAsJsonAsync<Player>($"https://localhost:7065/add-player", createdItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        followingCreate = true;
        await LoadData();

    }

    private async Task OnGridDelete(GridCommandEventArgs args)
    {
        var deletedItem = (Player)args.Item;

        var response = await httpclient.DeleteAsync($"https://localhost:7065/delete-player/{deletedItem.Id}");

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        await LoadData();

    }

    private async Task OnGridUpdate(GridCommandEventArgs args)
    {
        if (followingCreate)
        {
            followingCreate = false;
            args.IsCancelled = true;
            return;
        }

        var updatedItem = (Player)args.Item;

        var response = await httpclient.PutAsJsonAsync<Player>($"https://localhost:7065/edit-player/{updatedItem.Id}", updatedItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        await LoadData();
    }

}
