@page "/manage-players"
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject HttpClient httpclient

<TelerikGrid OnRead="@OnGridRead"
             TItem="@Player"
             EditMode="@GridEditMode.Incell"
             FilterMode="@GridFilterMode.FilterRow"
             Sortable="true"
             Pageable="true"
             PageSize="3"
             SelectionMode="@GridSelectionMode.Multiple"
             @bind-SelectedItems="@selectedPlayers"
             OnCreate="@OnGridCreate"
             OnDelete="@OnGridDelete"
             OnUpdate="@OnGridUpdate"
             @ref="@GridRef"
             OnStateChanged="@( (GridStateEventArgs<Player> args) => OnGridStateChanged(args) )">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Item</GridCommandButton>
        <TelerikButton OnClick="BatchEditMode">Batch Edit Mode</TelerikButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridCheckboxColumn SelectAll="true" ></GridCheckboxColumn>
        <GridColumn Field="@nameof(Player.Username)" Title="Username" />
        <GridColumn Field="@nameof(Player.Email)" Title="Email" />
        <GridColumn Field="@nameof(Player.Rank)" Title="Rank" />
        <GridColumn Field="@nameof(Player.Kills)" Title="Total Kills" />
        <GridColumn Field="@nameof(Player.KD)" Title="K/D ratio" />
        <GridColumn Field="@nameof(Player.Headshots)" Title="Headshots" />
        <GridColumn Field="@nameof(Player.Accuracy)" Title="Accuracy" />
        <GridCommandColumn Width="150px">
            <GridCommandButton Command="Delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@if (NoPlayerSelected)
{
    <span style="color:red">Select at least one player to edit</span>
}

<CascadingValue Value="@selectedPlayers">
    <CascadingValue Value="@isModalVisible">
        <BatchEditPopup RebindGrid="GridStateChangedFromPopup"></BatchEditPopup>
    </CascadingValue>
</CascadingValue>


@code {

    private bool followingCreate { get; set; } = false;
    private bool isModalVisible { get; set; } = false;
    private bool NoPlayerSelected { get; set; } = false;
    private bool SelectAllPlayers { get; set; } = false;
    private TelerikGrid<Player> GridRef { get; set; }

    public IEnumerable<Player> selectedPlayers { get; set; } = new List<Player>();

    private async Task OnGridCreate(GridCommandEventArgs args)
    {
        var createdItem = (Player)args.Item;

        var response = await httpclient.PostAsJsonAsync<Player>($"https://localhost:7065/add-player", createdItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        followingCreate = true;

    }

    private async Task OnGridDelete(GridCommandEventArgs args)
    {
        var deletedItem = (Player)args.Item;

        var response = await httpclient.DeleteAsync($"https://localhost:7065/delete-player/{deletedItem.Id}");

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

    }

    private async Task OnGridRead(GridReadEventArgs args)
    {

        var response = await httpclient.PostAsJsonAsync($"https://localhost:7065/get-all-players", args.Request);

        if (!response.IsSuccessStatusCode)
            throw new Exception($"Response did not return data, Response : {response.StatusCode}");

        GridPlayerData? result = await response.Content.ReadFromJsonAsync<GridPlayerData>();

        args.Data = result.CurrentPageData;
        args.Total = result.TotalItemCount;

    }

    private async Task OnGridUpdate(GridCommandEventArgs args)
    {
        if (followingCreate)
        {
            followingCreate = false;
            args.IsCancelled = true;
            return;
        }

        var updatedItem = (Player)args.Item;

        var response = await httpclient.PutAsJsonAsync<Player>($"https://localhost:7065/edit-player/{updatedItem.Id}", updatedItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

    }

    private void BatchEditMode()
    {
        if(selectedPlayers.Count() == 0)
        {
            NoPlayerSelected = true;
            return;
        }

        isModalVisible = true;
    }

    private async Task OnGridStateChanged(GridStateEventArgs<Player> args)
    {
        isModalVisible = false;
        NoPlayerSelected = false;
    }

    private async Task GridStateChangedFromPopup()
    {
        isModalVisible = false;
        SelectAllPlayers = false;
        selectedPlayers = Enumerable.Empty<Player>();
        GridRef.Rebind();
    }
}
