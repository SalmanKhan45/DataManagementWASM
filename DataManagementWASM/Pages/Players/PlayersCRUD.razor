@page "/manage-players"
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject HttpClient httpclient

<TelerikGrid OnRead="@OnGridRead"
             TItem="@Player"
             EditMode="@GridEditMode.Incell"
             FilterMode="@GridFilterMode.FilterRow"
             Sortable="true"
             Pageable="true"
             PageSize="3"
             SelectionMode="@GridSelectionMode.Multiple"
             @bind-SelectedItems="@selectedPlayers"
             OnCreate="@OnGridCreate"
             OnDelete="@OnGridDelete"
             OnUpdate="@OnGridUpdate">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Item</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridCheckboxColumn SelectAll="true"></GridCheckboxColumn>
        <GridColumn Field="@nameof(Player.username)" Title="Username" />
        <GridColumn Field="@nameof(Player.email)" Title="Email" />
        <GridColumn Field="@nameof(Player.rank)" Title="Rank" />
        <GridColumn Field="@nameof(Player.kills)" Title="Total Kills" />
        <GridColumn Field="@nameof(Player.KD)" Title="K/D ratio" />
        <GridColumn Field="@nameof(Player.headshots)" Title="Headshots" />
        <GridColumn Field="@nameof(Player.accuracy)" Title="Accuracy" />
        <GridCommandColumn Width="150px">
            <GridCommandButton Command="Delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

<TelerikButton OnClick="EnterBatchEditMode">Batch Edit Mode</TelerikButton>

<CascadingValue Value="@selectedPlayers">
    <CascadingValue Value="@isModalVisible">
        <BatchEditWindow></BatchEditWindow>
    </CascadingValue>
</CascadingValue>


@code {

    private bool followingCreate { get; set; } = false;
    private bool isModalVisible { get; set; } = false;

    public IEnumerable<Player> selectedPlayers { get; set; } = new List<Player>();


    protected override async Task OnInitializedAsync()
    {
        isModalVisible = false;
    }

    private async Task OnGridCreate(GridCommandEventArgs args)
    {
        var createdItem = (Player)args.Item;

        var response = await httpclient.PostAsJsonAsync<Player>($"https://localhost:7065/add-player", createdItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

        followingCreate = true;

    }

    private async Task OnGridDelete(GridCommandEventArgs args)
    {
        var deletedItem = (Player)args.Item;

        var response = await httpclient.DeleteAsync($"https://localhost:7065/delete-player/{deletedItem.Id}");

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

    }

    private async Task OnGridRead(GridReadEventArgs args)
    {

        var response = await httpclient.PostAsJsonAsync($"https://localhost:7065/get-all-players", args.Request);

        if (!response.IsSuccessStatusCode)
            throw new Exception($"Response did not return data, Response : {response.StatusCode}");

        GridPlayerData? result = await response.Content.ReadFromJsonAsync<GridPlayerData>();

        args.Data = result.CurrentPageData;
        args.Total = result.TotalItemCount;

    }

    private async Task OnGridUpdate(GridCommandEventArgs args)
    {
        if (followingCreate)
        {

            followingCreate = false;
            args.IsCancelled = true;
            return;
        }

        var updatedItem = (Player)args.Item;
        // updatedItem.Id = LastId;

        var response = await httpclient.PutAsJsonAsync<Player>($"https://localhost:7065/edit-player/{updatedItem.Id}", updatedItem);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"An error occured, Status Code: {response.StatusCode} ");
        }

    }

    private void EnterBatchEditMode()
    {
        isModalVisible = true;
    }

}
